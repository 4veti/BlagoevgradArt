// <auto-generated />
using System;
using BlagoevgradArt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlagoevgradArt.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240413190422_RemovedPaintingMaterialsMappingTable")]
    partial class RemovedPaintingMaterialsMappingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.ArtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Art type's unique identifier. | Уникален идентификатор на видът изкуство.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the art type. | Име на видът изкуство.");

                    b.HasKey("Id");

                    b.ToTable("ArtTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Живопис"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Графика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Рисунка"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Дърворезба"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Керамика"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Витраж"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Металопластика"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Декоративна скулптора"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Бижутерия"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Оригами"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Друго"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Author unique identifier. | Уникален идентификатор на автора.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the author. | Първото име на автора.");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the author. | Фамилия на автора.");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Author's phone number. | Телефонен номер на автора.");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("File path to the author's profile picture. | Файлов път до профилната снимка на автора.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User unique identifier. | Уникален идентификатор на потребителя.");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Vladimir",
                            LastName = "Maistora",
                            PhoneNumber = "+359888123456",
                            ProfilePicturePath = "BlagoevgradArt\\Images\\Authors\\Tsanko_Lavrenov.jpg",
                            UserId = "7d7a4b74-dd27-4262-b932-ee5cd63a519d"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Tsanko",
                            LastName = "Lavrenov",
                            PhoneNumber = "+359888654321",
                            ProfilePicturePath = "BlagoevgradArt\\Images\\Authors\\Tsanko_Lavrenov.jpg",
                            UserId = "1b6e897e-6594-4453-ade4-305d69ae8391"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.AuthorExhibition", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author's unique identifier. | Уникален идентификатор на автора.");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int")
                        .HasComment("Exhibition's unique identifier. | Уникален идентификатор на изложбата.");

                    b.HasKey("AuthorId", "ExhibitionId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("AuthorsExhibitions");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            ExhibitionId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            ExhibitionId = 1
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.BaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Base type's unique identifier. | Уникален идентификатор на основата.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Base type's name. | Име на основата.");

                    b.HasKey("Id");

                    b.ToTable("BaseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Платно"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Хартия"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Стъкло"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Дърво"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Картон"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Exhibition unique identifier. | Уникален идентификатор на изложбата.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the exhibition. | Описание на изложбата.");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of the gallery hosting the exhibition. | Уникален идентификатор на галерията, в която е изложбата.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the exhibition. | Име на изложбата.");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2")
                        .HasComment("Opening date of the exhibition. | Дата на откриване на изложбата.");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("Exhibitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Запознайте се с някои от основоположниците на българското възрожденско изкуство.",
                            GalleryId = 1,
                            Name = "Началото на българското възрожденско изкуство.",
                            OpeningDate = new DateTime(2024, 5, 8, 15, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Gallery unique identifier. | Уникален идентификатор на галерията.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Address of the gallery. | Адрес на галерията.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the gallery. | Описание на галерията.");

                    b.Property<string>("MainImage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("File path to the gallery's main image. | Файлов път до главната снимка на галерията.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the gallery. | Име на галерията.");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Gallery's phone number. | Телефонен номер на галерията.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User unique identifier. | Уникален идентификатор на потребителя.");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Working time of the gallery. | Работно време на галерията.");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Galleries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. \"Горно нанадолнище\" №0, кв. \"Кал до колене\", Благоевград.",
                            Description = "Най-дейната и известна галерия в югозапада.",
                            Name = "АртГалерия",
                            PhoneNumber = "+359888696969",
                            UserId = "a9d96207-30f8-40cb-a670-adc6acd76fba",
                            WorkingTime = "Пон-Пет 08:30-19:30"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Genre's unique identifier. | Уникален идентификатор на жанра.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the genre. | Име на жанра.");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Портрет"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пейзаж"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Натюрморт"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Фигурална композиция"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Абстракция"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Material's unique identifier. | Уникален идентификатор на материала.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the material. | Име на материала.");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Акварел"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Темпера"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Маслени бои"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Сух пастел"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Маслен пастел"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Молив"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Мастило"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Дърво"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Колаж"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Painting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Painting's unique identifier. | Уникален идентификатор на картината.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArtTypeId")
                        .HasColumnType("int")
                        .HasComment("Art type unique identifier. | Уникален идентификатор на вида изкуство.");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author's unique identifier. | Уникален идентификатор на автора.");

                    b.Property<int>("BaseTypeId")
                        .HasColumnType("int")
                        .HasComment("Painting's base type unique identifier. | Уникален идентификатор на основата на картината.");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the painting. | Описание на картината.");

                    b.Property<int?>("ExhibitionId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of the exhibition which hosts the painting. | Уникален идентификатор на изложбата, в която е картината.");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre unique identifier. | Уникален идентификатор на жанра.");

                    b.Property<byte>("HeightCm")
                        .HasColumnType("tinyint")
                        .HasComment("Painting's height in centimeters. | Височина на картината в сантиметри.");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Painting's file path. | Файлов път на картината.");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Physical availability of the painting. | Физическа наличност на картината.");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasComment("Painting's material unique identifier. | Уникален идентификатор на материала на картината.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Painting's title. | Заглавие на картината.");

                    b.Property<byte>("WidthCm")
                        .HasColumnType("tinyint")
                        .HasComment("Painting's width in centimeters. | Широчина на картината в сантиметри.");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint")
                        .HasComment("Year of the painting. | Година на картината.");

                    b.HasKey("Id");

                    b.HasIndex("ArtTypeId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BaseTypeId");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Paintings");

                    b.HasComment("The painting table. | Таблица за картина.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtTypeId = 3,
                            AuthorId = 1,
                            BaseTypeId = 1,
                            Description = "Тази картина вероятно е от XXв.",
                            ExhibitionId = 1,
                            GenreId = 1,
                            HeightCm = (byte)69,
                            ImagePath = "BlagoevgradArt\\Images\\Paintings\\Vladimir_Woman.jpg",
                            IsAvailable = false,
                            MaterialId = 1,
                            Title = "Жена",
                            WidthCm = (byte)42,
                            Year = (short)1920
                        },
                        new
                        {
                            Id = 2,
                            ArtTypeId = 3,
                            AuthorId = 1,
                            BaseTypeId = 2,
                            Description = "Тази картина изобразява неизвестна жена от миналия век.",
                            ExhibitionId = 1,
                            GenreId = 1,
                            HeightCm = (byte)50,
                            ImagePath = "BlagoevgradArt\\Images\\Paintings\\Vladimir_Mother.jpg",
                            IsAvailable = false,
                            MaterialId = 2,
                            Title = "Майка",
                            WidthCm = (byte)30,
                            Year = (short)1923
                        },
                        new
                        {
                            Id = 3,
                            ArtTypeId = 1,
                            AuthorId = 2,
                            BaseTypeId = 1,
                            Description = "Пейзаж на Хилендарския манастир.",
                            ExhibitionId = 1,
                            GenreId = 2,
                            HeightCm = (byte)55,
                            ImagePath = "BlagoevgradArt\\Images\\Paintings\\Tsanko_Hilendarski.jpg",
                            IsAvailable = false,
                            MaterialId = 3,
                            Title = "Хилендарския манастир",
                            WidthCm = (byte)73,
                            Year = (short)1945
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier of the technique. | Уникален идентификатор на техниката.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Technique's name. | Име на техниката.");

                    b.Property<int?>("PaintingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaintingId");

                    b.ToTable("Techniques");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Висок печат"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Дълбок печат"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Плосък печат (литография)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Сериграфия (ситопечат)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Дигитални техники"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.AuthorHelperUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("AuthorHelperUser");

                    b.HasData(
                        new
                        {
                            Id = "7d7a4b74-dd27-4262-b932-ee5cd63a519d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77237eb6-1474-4c7e-88b5-d60c282484a0",
                            Email = "vladimaistora@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "vladimaistora@mail.com",
                            NormalizedUserName = "vladimaistora@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENiaV3gcSxn87g2nvrp//lRB3CsXdMgRBdpnK/EwFKl61lGazLPn/U4bBXn8fWKt+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f64eefcb-d1b9-4bd7-8b7d-202dd3875269",
                            TwoFactorEnabled = false,
                            UserName = "vladimaistora@mail.com"
                        },
                        new
                        {
                            Id = "1b6e897e-6594-4453-ade4-305d69ae8391",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78dfbf7b-1025-4920-b0ca-f767a0cea2e9",
                            Email = "tsankolavrenov@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "tsankolavrenov@mail.com",
                            NormalizedUserName = "tsankolavrenov@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECb7v3AddwwxfGkBm5iCqyVQeZ3Gx0nOsXFv3G3JTsvKXnB5mReEnZv2I6CyDmV31w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5dd5238-23b0-49ad-9cfa-5d4027d8cfb1",
                            TwoFactorEnabled = false,
                            UserName = "tsankolavrenov@mail.com"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.GalleryHelperUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("GalleryHelperUser");

                    b.HasData(
                        new
                        {
                            Id = "a9d96207-30f8-40cb-a670-adc6acd76fba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8300171c-e334-481f-896e-29bc1be1bc97",
                            Email = "gallery@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "gallery@mail.com",
                            NormalizedUserName = "gallery@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlOme4gszBoXxncFpI9azeyVYR87HeDw7RM3AKN7yg/J/EdFqsG5gKtdbOIrjR7yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62800cdc-1b89-4c44-bf07-19a300b884ac",
                            TwoFactorEnabled = false,
                            UserName = "gallery@mail.com"
                        });
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Author", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.AuthorHelperUser", "User")
                        .WithOne("Author")
                        .HasForeignKey("BlagoevgradArt.Infrastructure.Data.Models.Author", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.AuthorExhibition", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Author", "Author")
                        .WithMany("AuthorExhibitions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", "Exhibition")
                        .WithMany("AuthorExhibitions")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Gallery", "Gallery")
                        .WithMany("Exhibitions")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Gallery", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.GalleryHelperUser", "User")
                        .WithOne("Gallery")
                        .HasForeignKey("BlagoevgradArt.Infrastructure.Data.Models.Gallery", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Painting", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.ArtType", "ArtType")
                        .WithMany()
                        .HasForeignKey("ArtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Author", "Author")
                        .WithMany("Paintings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.BaseType", "BaseType")
                        .WithMany()
                        .HasForeignKey("BaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", "Exhibition")
                        .WithMany("Paintings")
                        .HasForeignKey("ExhibitionId");

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtType");

                    b.Navigation("Author");

                    b.Navigation("BaseType");

                    b.Navigation("Exhibition");

                    b.Navigation("Genre");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Technique", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Painting", null)
                        .WithMany("Techniques")
                        .HasForeignKey("PaintingId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Author", b =>
                {
                    b.Navigation("AuthorExhibitions");

                    b.Navigation("Paintings");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", b =>
                {
                    b.Navigation("AuthorExhibitions");

                    b.Navigation("Paintings");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Gallery", b =>
                {
                    b.Navigation("Exhibitions");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Painting", b =>
                {
                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.AuthorHelperUser", b =>
                {
                    b.Navigation("Author")
                        .IsRequired();
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.GalleryHelperUser", b =>
                {
                    b.Navigation("Gallery")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
