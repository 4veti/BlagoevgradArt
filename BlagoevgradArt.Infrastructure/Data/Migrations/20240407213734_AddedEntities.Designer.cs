// <auto-generated />
using System;
using BlagoevgradArt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlagoevgradArt.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240407213734_AddedEntities")]
    partial class AddedEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.ArtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Art type's unique identifier. | Уникален идентификатор на видът изкуство.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the art type. | Име на видът изкуство.");

                    b.HasKey("Id");

                    b.ToTable("ArtTypes");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.AuthorExhibition", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Author's unique identifier. | Уникален идентификатор на автора.");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int")
                        .HasComment("Exhibition's unique identifier. | Уникален идентификатор на изложбата.");

                    b.HasKey("AuthorId", "ExhibitionId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("AuthorsExhibitions");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.BaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Base type's unique identifier. | Уникален идентификатор на основата.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Base type's name. | Име на основата.");

                    b.HasKey("Id");

                    b.ToTable("BaseTypes");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Exhibition unique identifier. | Уникален идентификатор на изложбата.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the exhibition. | Описание на изложбата.");

                    b.Property<string>("GalleryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the gallery hosting the exhibition. | Уникален идентификатор на галерията, в която е изложбата.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the exhibition. | Име на изложбата.");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2")
                        .HasComment("Opening date of the exhibition. | Дата на откриване на изложбата.");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Genre's unique identifier. | Уникален идентификатор на жанра.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the genre. | Име на жанра.");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Material's unique identifier. | Уникален идентификатор на материала.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Name of the material. | Име на материала.");

                    b.Property<int?>("PaintingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaintingId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Painting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Painting's unique identifier. | Уникален идентификатор на картината.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArtTypeId")
                        .HasColumnType("int")
                        .HasComment("Art type unique identifier. | Уникален идентификатор на вида изкуство.");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Author's unique identifier. | Уникален идентификатор на автора.");

                    b.Property<int>("BaseTypeId")
                        .HasColumnType("int")
                        .HasComment("Painting's base type unique identifier. | Уникален идентификатор на основата на картината.");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the painting. | Описание на картината.");

                    b.Property<int?>("ExhibitionId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of the exhibition which hosts the painting. | Уникален идентификатор на изложбата, в която е картината.");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre unique identifier. | Уникален идентификатор на жанра.");

                    b.Property<byte>("HeightCm")
                        .HasColumnType("tinyint")
                        .HasComment("Painting's height in centimeters. | Височина на картината в сантиметри.");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Painting's file path. | Файлов път на картината.");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Physical availability of the painting. | Физическа наличност на картината.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Painting's title. | Заглавие на картината.");

                    b.Property<byte>("WidthCm")
                        .HasColumnType("tinyint")
                        .HasComment("Painting's width in centimeters. | Широчина на картината в сантиметри.");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint")
                        .HasComment("Year of the painting. | Година на картината.");

                    b.HasKey("Id");

                    b.HasIndex("ArtTypeId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BaseTypeId");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("GenreId");

                    b.ToTable("Paintings");

                    b.HasComment("The painting table. | Таблица за картина.");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier of the technique. | Уникален идентификатор на техниката.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Technique's name. | Име на техниката.");

                    b.Property<int?>("PaintingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaintingId");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Author", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the author. | Първото име на автора.");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the author. | Фамилия на автора.");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("File path to the author's profile picture. | Файлов път до профилната снимка на автора.");

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Gallery", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Address of the gallery. | Адрес на галерията.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the gallery. | Описание на галерията.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the gallery. | Име на галерията.");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Working time of the gallery. | Работно време на галерията.");

                    b.HasDiscriminator().HasValue("Gallery");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.AuthorExhibition", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Author", "Author")
                        .WithMany("AuthorExhibitions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", "Exhibition")
                        .WithMany("AuthorExhibitions")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Gallery", "Gallery")
                        .WithMany("Exhibitions")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Material", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Painting", null)
                        .WithMany("Materials")
                        .HasForeignKey("PaintingId");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Painting", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.ArtType", "ArtType")
                        .WithMany()
                        .HasForeignKey("ArtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.BaseType", "BaseType")
                        .WithMany()
                        .HasForeignKey("BaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", "Exhibition")
                        .WithMany("Paintings")
                        .HasForeignKey("ExhibitionId");

                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtType");

                    b.Navigation("Author");

                    b.Navigation("BaseType");

                    b.Navigation("Exhibition");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Technique", b =>
                {
                    b.HasOne("BlagoevgradArt.Infrastructure.Data.Models.Painting", null)
                        .WithMany("Techniques")
                        .HasForeignKey("PaintingId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Exhibition", b =>
                {
                    b.Navigation("AuthorExhibitions");

                    b.Navigation("Paintings");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Painting", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Author", b =>
                {
                    b.Navigation("AuthorExhibitions");
                });

            modelBuilder.Entity("BlagoevgradArt.Infrastructure.Data.Models.Gallery", b =>
                {
                    b.Navigation("Exhibitions");
                });
#pragma warning restore 612, 618
        }
    }
}
